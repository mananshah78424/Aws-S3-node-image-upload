SHORTCUTS

Connect to postgre: psql -h localhost -U manan -d mydb 
Create User: CREATE USER manan WITH PASSWORD 'password';
Grant permissions:
    GRANT CONNECT ON DATABASE mydb TO manan;
    GRANT USAGE ON SCHEMA public TO manan;
    GRANT CREATE ON SCHEMA public TO manan;
    GRANT SELECT, INSERT, UPDATE, DELETE ON ALL TABLES IN SCHEMA public TO manan;
    GRANT USAGE, SELECT ON ALL SEQUENCES IN SCHEMA public TO manan;

Get out of psql: \q

FormData
For images, we need form data. 

Multer
Multer helps in attatching files to our request sent. 

Prisma
Prisma is an open-source ORM (Object-Relational Mapping) tool that simplifies database interactions in your application. It provides an abstraction layer between your application code and the database, allowing you to work with your database using a more intuitive and type-safe API. Prisma consists of:

Prisma Client: An auto-generated and type-safe query builder for your database.
Prisma Migrate: A tool for managing schema migrations.
Prisma Studio: A GUI for interacting with your database.

npx prisma db push: This command applies the Prisma schema to your database. It creates or updates tables in the database to match the schema you defined in schema.prisma.



Implemented AWS CloudFront CDN, improving global content delivery times by up to 98% and achieving sub-10ms response times in key regions.



Auth.js (Middleware)
const authenticateToken = (req, res, next) => {
This defines a middleware function named authenticateToken. Middleware functions have access to the request (req), response (res), and the next function to pass control to the next middleware or route handler.

const authHeader = req.get("Authorization");
This retrieves the value of the Authorization header from the incoming request. The Authorization header typically contains the JWT.

app.get('/protected-route', authenticateToken, (req, res) => {
  res.send('This is a protected route');
});
This means that the /protected-route endpoint will only be accessible if a valid JWT is provided in the Authorization header.





userContext.js
You create a context and then a contextProvider to provide the context.
In the contextProvider - props of children resembles the components.


TO RUN

CLIENT - 
npm run start

EXPRESS - 
npm run dev