generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          Int          @id @default(autoincrement())
  email       String       @unique
  password    String
  bio         String?
  name        String
  profilepic  String?     
  isAdmin     Boolean      @default(false)
  posts       Post[]       @relation("UserPosts")
  comments    Comment[]    @relation("UserComments")
  likes       Like[]       @relation("UserLikes")
  notifications Notification[] @relation("UserNotifications")
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
}

model Post {
  id            Int             @id @default(autoincrement())
  fileName      String?         // Renamed from imageName
  mediaType     String          // New column
  caption       String
  totalComments Int             @default(0)
  totalLikes    Int             @default(0)
  created       DateTime        @default(now())
  userId        Int
  user          User            @relation("UserPosts", fields: [userId], references: [id])
  comments      Comment[]       @relation("PostComments")
  likes         Like[]          @relation("PostLikes")
  notifications Notification[]  @relation("PostNotifications") // Define relation here
  @@index([userId])
}

model Comment {
  id        Int      @id @default(autoincrement())
  content   String
  createdAt DateTime @default(now())
  postId    Int
  post      Post     @relation("PostComments", fields: [postId], references: [id])
  userId    Int
  user      User     @relation("UserComments", fields: [userId], references: [id])
  @@index([postId])
  @@index([userId])
}

model Like {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  postId    Int
  post      Post     @relation("PostLikes", fields: [postId], references: [id])
  userId    Int
  user      User     @relation("UserLikes", fields: [userId], references: [id])
  @@index([postId])
  @@index([userId])
}

model Notification {
  id            Int      @id @default(autoincrement())
  type          String   // Type of notification (e.g., "like", "comment", "follow")
  content       String   // Description or content of the notification
  userIdToInform Int?    // Optional field for users to be informed
  userLoggedIn  User?    @relation("UserNotifications", fields: [userIdToInform], references: [id])
  postId        Int?     // Optional field to relate to Post
  post          Post?    @relation("PostNotifications", fields: [postId], references: [id])
  createdAt     DateTime @default(now())
  postURL       String?   //URL for the post to display as the picture
  @@index([userIdToInform])
}
